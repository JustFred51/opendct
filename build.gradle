/*
 * Copyright 2015 The OpenDCT Authors. All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.apache.tools.ant.filters.FixCrLfFilter
import org.gradle.internal.os.OperatingSystem

plugins {
    id "nebula.ospackage" version "3.3.0"
    id "com.jfrog.bintray" version "1.4"
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven'

group = 'opendct'
description = 'Digital Cable Tuner for SageTV.'

repositories {
    mavenCentral()
	maven {
        url "http://4thline.org/m2"
    }
}

ext {
    linuxPackageRelease = '1'
    linuxInstallPath = '/opt/opendct'
    linuxUser = 'opendct'
    linuxGroup = 'opendct';

    winWixCompile = 'build/wix/compile'
    winWixSource = 'build/wix/source'
    winWixConfig = 'build/wix/config'

    ffmpegVersion = '2.8.1-1.1'
    log4jVersion = '2.17.1'
    jnaVersion = '4.2.1'

    versionText = new File('src/main/java/opendct/config/StaticConfig.java').text
    majorVersion = (versionText =~ /VERSION_MAJOR = ([0-9]+)/)[0][1]
    minorVersion = (versionText =~ /VERSION_MINOR = ([0-9]+)/)[0][1]
    buildVersion = (versionText =~ /VERSION_BUILD = ([0-9]+)/)[0][1]
    buildType = "Stable"

    javaVersion = '1.7'
    buildVersion = "${majorVersion}.${minorVersion}.${buildVersion}"
    buildVersionString = "${buildVersion}-${buildType}"

}

version = buildVersion
targetCompatibility = javaVersion
sourceCompatibility = javaVersion

configurations {
    compile
    windows_ide
    linux_ide
    windows_x86
    windows_x86_64
    linux_x86
    linux_x86_64
    json_client
}

dependencies {
    testCompile 'org.testng:testng:6.1.1'

    compile fileTree(dir: 'lib', include: ['*.jar'])
    compile 'org.fourthline.cling:cling-core:2.1.1'
    compile "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    compile "net.java.dev.jna:jna:${jnaVersion}"
    compile "net.java.dev.jna:jna-platform:${jnaVersion}"
    compile 'org.nanohttpd:nanohttpd:2.3.0'
    compile 'org.nanohttpd:nanohttpd-nanolets:2.3.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.bytedeco:javacpp:1.1'
    compile ("org.bytedeco.javacpp-presets:ffmpeg:${ffmpegVersion}") { transitive = false }

    windows_x86 configurations.compile
    windows_x86 ("org.bytedeco.javacpp-presets:ffmpeg:${ffmpegVersion}:windows-x86") { transitive = false }

    windows_x86_64 configurations.compile
    windows_x86_64 ("org.bytedeco.javacpp-presets:ffmpeg:${ffmpegVersion}:windows-x86_64") { transitive = false }

    windows_ide ("org.bytedeco.javacpp-presets:ffmpeg:${ffmpegVersion}:windows-x86") { transitive = false }
    windows_ide ("org.bytedeco.javacpp-presets:ffmpeg:${ffmpegVersion}:windows-x86_64") { transitive = false }

    linux_x86 configurations.compile
    linux_x86 ("org.bytedeco.javacpp-presets:ffmpeg:${ffmpegVersion}:linux-x86") { transitive = false }

    linux_x86_64 configurations.compile
    linux_x86_64 ("org.bytedeco.javacpp-presets:ffmpeg:${ffmpegVersion}:linux-x86_64") { transitive = false }

    linux_ide ("org.bytedeco.javacpp-presets:ffmpeg:${ffmpegVersion}:linux-x86") { transitive = false }
    linux_ide ("org.bytedeco.javacpp-presets:ffmpeg:${ffmpegVersion}:linux-x86_64") { transitive = false }

    json_client 'com.google.code.gson:gson:2.8.0'
}

sourceSets {
    main {
        java {
            srcDirs = [
                'src/main/java'
            ]
            excludes = [
                // JSON client. Nothing outside of this package should be using anything inside
                // of this package. We still include the POJOs since some of them are used by the
                // client and the server which is not a problem.
                'opendct/nanohttpd/client/**'
            ]
        }
    }
    jsonClient {
        java {
            srcDirs = [
                'src/main/java'
            ]
            includes = [
                // Basic versioning information.
                'opendct/config/StaticConfig.java',
                // Convenience for exception to JSON conversions.
                'opendct/config/options/DeviceOptionException.java',
                'opendct/config/options/DeviceOption.java',
                'opendct/config/options/DeviceOptionType.java',
                // JSON client.
                'opendct/nanohttpd/client/**',
                // POJO's used by the SageTV plugin.
                'opendct/nanohttpd/pojo/**'
            ]
        }
        compileClasspath += configurations.json_client
    }
}

test {
    useTestNG()

    reports.html.destination = file("$buildDir/reports/testng")
    systemProperty 'opendct_log_root', 'build/test-log'
}

idea {
    project {
        languageLevel = javaVersion
    }

    module {
        jdkName = javaVersion

        // The binary will not conflict at runtime and if you're running a 64-bit OS, you could use
        // either one. There doesn't appear to be a good way to automatically detect this.
        if (OperatingSystem.current().isWindows()) {
            // In some versions of IDEA 2016 these binaries will only load if they are set to PROVIDED.
            scopes.PROVIDED.plus += [ configurations.windows_ide ]
            scopes.RUNTIME.plus += [ configurations.windows_ide ]
        } else {
            // In some versions of IDEA 2016 these binaries will only load if they are set to PROVIDED.
            scopes.PROVIDED.plus += [ configurations.linux_ide ]
            scopes.RUNTIME.plus += [ configurations.linux_ide ]
        }

        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        if (OperatingSystem.current().isWindows()) {
            plusConfigurations += [configurations.windows_ide]
        } else {
            plusConfigurations += [configurations.linux_ide]
        }

        downloadJavadoc = true
        downloadSources = true
    }
}

jar {
	exclude 'log4j2.xml'
	exclude 'opendct.properties.default'
}

ospackage {
    release = linuxPackageRelease
    user = linuxUser
    permissionGroup = linuxGroup
    packager = "OpenDCT Authors"
    maintainer = "OpenDCT Authors"
    url = "https://github.com/enternoescape/opendct"

    os = LINUX
    type = BINARY

    configurationFile = "/etc/opendct/conf/opendct.properties.default"

    from('src/main/resources') {
        include 'opendct.properties.default'
        fileType CONFIG | NOREPLACE
        into '/etc/opendct/conf'
    }

    from('transcode') {
        include '*.properties'
        into '/etc/opendct/conf/transcode'
    }

    into linuxInstallPath

    from(jar.outputs.files) {
        into 'lib'
    }

    from('src/main/resources') {
        include 'log4j2.xml'
        into 'lib'
    }

    from('build/jsw') {
        include 'conf/*'
        include 'lib/*'
        into 'jsw'
    }

    from('build/jsw') {
        include 'doc/*'
        into 'jsw'

    }

    from('build/jsw') {
        include 'bin/sh.script.in'
        into 'jsw'
        fileMode 0755
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    from('build/jsw') {
        include 'bin/wrapper'
        into 'jsw'
        fileMode 0755
    }

    from('build/bin') {
        include 'ccextractor/ccextractor'
        into 'bin'
        fileMode 0755
    }

    from('build/bin') {
        include 'video/*.ts'
        into 'bin'
        fileMode 0444
    }

    from('scripts/any') {
        include '*'
        into ''
        fileMode 0550
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    from('distribution') {
        include 'LICENSE'
        include 'licenses/*'
        into ''
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }
}

task jsonClientJar(type: Jar) {
    description = 'Build opendct-json-client.jar'
    archiveName = "opendct-json-client.jar"
    destinationDir = file("build/distributions/json-client")

    from files(sourceSets.jsonClient.output)
}

task packageJsonClient(dependsOn: jsonClientJar) << {
    copy {
        from configurations.json_client
        into "build/distributions/json-client"
    }
}

task buildWin32(dependsOn: build) << {
	println "Built native binary for Windows 32-bit..."

}

task buildWin64(dependsOn: build) << {
	println "Built native binary for Windows 64-bit..."

}

task buildLinux32(dependsOn: build) << {
	println "Built native binary for Linux 32-bit..."

}

task buildLinux64(dependsOn: build) << {
	println "Built native binary for Linux 64-bit..."

}

def changeBin(String arch, String dependency) {
    delete 'build/bin'

    copy {
        from "bin/${arch}"
        into 'build/bin'
    }

    copy {
        from "bin/video"
        into 'build/bin/video'
        include "*.ts"
    }

    delete 'build/jsw'

    copy {
        from "jsw/${arch}"
        include "bin/*"
        include "doc/*"
        include "lib/*"
        into 'build/jsw'
    }

    StringBuilder stringBuilder = new StringBuilder("wrapper.java.classpath.1=%WRAPPER_HOME%/lib/wrapper.jar\r\n");
    def counter = 2

    FileCollection files = jar.outputs.files
    files.each { File file ->
        stringBuilder.append("wrapper.java.classpath.${counter}=%OPENDCT_HOME%/lib/${file.name}\r\n")
        counter += 1
    }

    files = configurations.getByName(dependency)
    files.each { File file ->
        stringBuilder.append("wrapper.java.classpath.${counter}=%OPENDCT_HOME%/lib/${file.name}\r\n")
        counter += 1
    }

    copy {
        from "jsw/${arch}"
        include "conf/wrapper.conf"
        into 'build/jsw'

        filter {
            String line -> line.replaceAll("wrapper.java.classpath.1=%WRAPPER_HOME%/lib/wrapper.jar", stringBuilder.toString())
        }
    }
}

def sourceWin() {

    delete winWixCompile
    delete winWixSource
    delete winWixConfig

    copy {
        from 'scripts/wix'
        include 'Product.wxs'
        include 'Product_en-us.wxl'
        include 'WixUI_DCT.wxs'
        into winWixCompile
    }

    copy {
        from 'distribution'
        include 'images/OpenDCT.ico'
        include 'images/BannerTop.bmp'
        include 'images/Dialog.bmp'
        into winWixCompile
    }

    copy {
        from jar.outputs.files
        into "${winWixSource}/lib"
    }

    copy {
        from 'src/main/resources'
        include 'log4j2.xml'
        into "${winWixSource}/lib"
    }

    copy {
        from 'distribution'
        include 'LICENSE'
        include 'README.html'
        include 'licenses/*'
        include 'images/OpenDCT Console.ico'
        include 'images/OpenDCT Service.ico'
        include 'images/OpenDCT.ico'
        into winWixSource
    }

    copy {
        from 'src/main/resources'
        include 'opendct.properties.default'
        into winWixConfig
        rename (
            'opendct.properties.default',
            'opendct.properties'
        )
    }

    copy {
        from 'transcode'
        include '*.properties'
        into "${winWixConfig}/transcode"
    }
}

def packageWin(String arch) {
    if (!OperatingSystem.current().isWindows()) {
        // When building with wine, you need to get a native msi.dll or you will not create a valid
        // installer. This is experimental and actual releases should only be built in Windows.
        exec {
            workingDir 'scripts/wix'
            commandLine './wine-build', arch, version
        }
    } else {
        exec {
            workingDir 'scripts/wix'
            commandLine 'cmd', '/c', "WixBuild.cmd", arch, version
        }
    }
}

task packageWin32(dependsOn: buildWin32) << {
    println 'Creating install package for Windows 32-bit...'

    changeBin('windows-x86', 'windows_x86')

    sourceWin()

    copy {
        from configurations.windows_x86
        into "${winWixSource}/lib"
    }

    packageWin('x86')
}

task packageWin64(dependsOn: buildWin64) << {
    println 'Creating install package for Windows 64-bit...'

    changeBin('windows-x86_64', 'windows_x86_64')

    sourceWin()

    copy {
        from configurations.windows_x86_64
        into "${winWixSource}/lib"
    }

    packageWin('x64')
}

task jswLinux32() << {
    changeBin('linux-x86', 'linux_x86')
}

task packageRpm32(type: Rpm) {
    dependsOn buildLinux32
    dependsOn jswLinux32

    arch = I386

    from("scripts/rpm/systemd") {
        include "opendct.service"
        into "/usr/lib/systemd/system"
        fileMode = 0664
        addParentDirs = false
        user = "root"
        permissionGroup = "root"
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    from('scripts/rpm/firewalld') {
        include 'opendct.xml'
        into '/etc/firewalld/services'
        fileMode = 0640
        addParentDirs = false
        user = "root"
        permissionGroup = "root"
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    into linuxInstallPath

    from(configurations.linux_x86) {
        into 'lib'
    }

    preInstall file('scripts/rpm/preInstall.sh')
    postInstall file('scripts/rpm/postInstall.sh')
    preUninstall file('scripts/rpm/preUninstall.sh')
    postUninstall file('scripts/rpm/postUninstall.sh')
}

task packageDeb32(type: Deb) {
    dependsOn buildLinux32
    dependsOn jswLinux32

    arch = I386

    from("scripts/deb/systemd") {
        include "opendct.service"
        into "/lib/systemd/system"
        fileMode = 0664
        addParentDirs = false
        user = "root"
        permissionGroup = "root"
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    into linuxInstallPath

    from(configurations.linux_x86) {
        into 'lib'
    }

    from('scripts/deb/ufw') {
        into ''
        fileMode 0755
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    preInstall file('scripts/deb/preInstall.sh')
    postInstall file('scripts/deb/postInstall.sh')
    preUninstall file('scripts/deb/preUninstall.sh')
    postUninstall file('scripts/deb/postUninstall.sh')
}

task packageLinux32() {
    dependsOn packageRpm32
    dependsOn packageDeb32
}

task jswLinux64() << {
    changeBin('linux-x86_64', 'linux_x86_64')
}

task packageRpm64(type: Rpm) {
    dependsOn buildLinux64
    dependsOn jswLinux64

    arch = X86_64

    from("scripts/rpm/systemd") {
        include "opendct.service"
        into "/usr/lib/systemd/system"
        fileMode = 0664
        addParentDirs = false
        user = "root"
        permissionGroup = "root"
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    from('scripts/rpm/firewalld') {
        include 'opendct.xml'
        into '/etc/firewalld/services'
        fileMode = 0640
        addParentDirs = false
        user = "root"
        permissionGroup = "root"
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    into linuxInstallPath

    from(configurations.linux_x86_64) {
        into 'lib'
    }

    preInstall file('scripts/rpm/preInstall.sh')
    postInstall file('scripts/rpm/postInstall.sh')
    preUninstall file('scripts/rpm/preUninstall.sh')
    postUninstall file('scripts/rpm/postUninstall.sh')
}

task packageDeb64(type: Deb) {
    dependsOn buildLinux64
    dependsOn jswLinux64

    arch = "amd64"

    from("scripts/deb/systemd") {
        include "opendct.service"
        into "/lib/systemd/system"
        fileMode = 0664
        addParentDirs = false
        user = "root"
        permissionGroup = "root"
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    into linuxInstallPath

    from(configurations.linux_x86_64) {
        into 'lib'
    }

    from('scripts/deb/ufw') {
        into ''
        fileMode 0755
        filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
    }

    preInstall file('scripts/deb/preInstall.sh')
    postInstall file('scripts/deb/postInstall.sh')
    preUninstall file('scripts/deb/preUninstall.sh')
    postUninstall file('scripts/deb/postUninstall.sh')
}

task packageLinux64() {
    dependsOn packageRpm64
    dependsOn packageDeb64
}

task buildAll() {
    dependsOn buildWin32
    dependsOn buildWin64
    dependsOn buildLinux32
    dependsOn buildLinux64
}

task packageAll() {
    dependsOn packageWin32
    dependsOn packageWin64
    dependsOn packageLinux32
    dependsOn packageLinux64
}

//gradlew bintrayUpload
bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_API");

    filesSpec {
        from ('build/distributions') {
            include '*.rpm', '*.deb', '*.msi'
        }
        into "releases/${buildVersion}"
    }

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
        repo = 'Releases'
        name = 'OpenDCT'
        userOrg = 'opendct'
        desc = "OpenDCT Release"
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/enternoescape/opendct'
        vcsUrl = 'https://github.com/enternoescape/opendct.git'
        issueTrackerUrl = 'https://github.com/enternoescape/opendct/issues'
        labels = ['opendct', 'sagetv', 'opensagetv']
        publicDownloadNumbers = true

        version {
            name = "${buildVersionString}"
            released  = new Date()
            desc = "OpenDCT ${buildVersionString}"
            vcsTag = "${buildVersionString}"
        }
    }
}